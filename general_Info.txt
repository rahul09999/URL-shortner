
Project Structure:
- server.js: Entry point of the application, sets up the server and routes requests.
-routes: 
1. app.use('/url', urlRoute);
    url:
        1. handleGenerateNewShortUrl -> route(/url) -> generate Short Urls
        2. handleAnalytics -> route(/url/analytics/:id)
        3. handleUrlRedirect -> route(/url/:shortId)

2. app.use('/', staticRoute);
    staticRoute:
        1. Get all Urls, and shows that -> route('/')
        2. LoginPage -> route('/login') -> render this page
        3. SignUpPage -> route('/signup') -> render this page

3. app.use('/user', userRoute);
    user:
        1. handleUserSignUp -> route('/') -> store info in DB and render home page
        2. handleUserLogin -> route('/login') -> check DB and remder home page

- models/user.js: Defines the user schema and handles database operations related to user accounts.
- models/url.js: Defines the URL schema and handles database operations related to shortened URLs.

-uuid -> used as uniques session id for user
    -If anyone logins then its sessionId created and get stored in map at file(../service/auth)
    code(previously, route-> (../service/auth))--
    const sessionidToUserMap = new Map();

    function setUser(sessionid, user){
        sessionidToUserMap.set(sessionid, user);
    }

    function getUser(sessionid){
        return sessionidToUserMap.get(sessionid);
    }

    module.exports = {
        setUser,
        getUser
    }


-->> Below auth is stateFull, mean on restarting server, sessionID get removed and we need to re-login always(Problem which can be solved by Stateless)
-Auth -> ./Middlewares/middleAuth.js
    1.restrictToLoggedinUserOnly
    -restrict User to login, if no sessionId or User exist then redirect to login page
    -app.use('/url', restrictToLoggedinUserOnly, urlRoute) -> first check using auth then goes to URLRoutes

    2. checkBasicAuth
    -Check basicAuth, if sessionId and user not exist then returns null
    -app.use('/', checkBasicAuth , staticRoute); -> return user object in request, if user exist then it return its details otherwise returns null
    -staticRoutes Uses this User object to get data specific to this user to segregate the user specific generated shortId's analytics


-->> Stateless(using jwt), so that we can store actual data in token using secret key which is known to me only
- views/: Contains HTML templates for rendering frontend pages.
- public/: Contains static assets such as CSS and JavaScript files.


Problems to solve->
-after generating shortID, when we refresh page, it generate same url's new shortID 2nd time and also sometime shows all shortIDs instead of showing user specific IDs
--> Issue: Its due to we refresh on /url route which gets req.body on each request and make shortID